from Cryptodome.Cipher import AES
from Cryptodome.Hash import HMAC, SHA384


client_cipher_text = b'\x00\x00\x00\x00\x00\x00\x00\x01\xa0\x07\x89\xd4\xb6\x27\x79\x55\x4c\x6f\x34\x75\x69\x93\xe1\x10\x94\x93\x1b\x54\x9f\x92\xcb\xef\x6c\xa7\x38\x5e\x09\x92\x37\x09\x28\xd1\x86\x5b\x64\xea\x43\x44\x1b\xd8\xa6\xd4\xd6\x96\xa8\xf4\xef\xfb\x73\x63\x1d\x64\x00\xea\xaf\x82\xcf\x2e\x17\xac\x8b\x2a\x15\x16\x49\x2b\x0d\xbc\xe7\xa7\xea\x4e\xe2\x44\x0b\x39\xb0\x7c\x98\x27\xfa\xad\x48\xce\xb7\xba\xdb\x57\x17\x4d\xd6\xb1\x3b\x1d\x86\x17\x77\xc8\x7e\x28\x77\xb6\xf5\xe1\xae\xb8\x09\xaf\x1e\xa8\x80\x5e\xca\x47\x2e\xe2\x44\x85\x46\x5d\x33\xe7\xe5\xbb\x82\x8a\xf1\x90\xeb\x3a\x4e\x85\x69\x39\x25\x71\xe0\xce\x14\xe8\x7c\x40\xfb\xf8\xc4\xec\x56\x5a\x8c\x76\x75\x50\x6f\xea\xc0\x0e\xc1\x05\xf0\x43\x20\x53\x38\xe7\x79\x89\xc4\x68\xcf\x2c\x82\x4b\x9b\x9b\x05\x3f\xd4\xa8\x41\xe3\xa9\xc4\x14\x1a\xfb\x3e\xc0\xd7\xe5\x57\x33\xd3\x94\xdb\xbf\xc4\xec\x31\x27\x5c\x58\x20\xf0\x00\xb0\xf3\x94\xc5\xfc\x8b\x19\x88\xe6\x78\xa1\xf0\xe2\x75\xff\xd7\x7c\x15\xbb\xd5\x2d\x29\x73\x2b\xed\x95\xa7\xd1\xb6\xa3\x66\xbb\x5b\x6f\x19\x93\x54\x31\x5f\xfa\xff\xec\x72\xc7\x3b\x73\x0f\x24\x1e\xbb\xea\x26\x13\x35\xc5\x82\x06\xda\xc5\x18\x44\x87\xe5\x1a\x09\x6b\x1d\x02\x10\x3b\x82\xe2\x4d\x91\xe6\xab\x24\x06\xcc\x51\x7e\x55\x86\x1d\xb3\x65\x72\x13\x1a\x09\x93\xb4\x20\x0f\x56\x99\x90\x9b\x07\xa6\x27\xe9\x86\x5f\xc8\x8a\xb2\x78\x46\xd7\x0b\x36\x77\xc6\x6e\x44\x3b\x73\x6f\xaa\xe2\xb3\x46\x11\xdf\x96\xab\x68\xd2\xc6\xa8\x88\x4f\x4d\x60\xdc\x80\x84\xbb'
server_random = b'\xe3\xc8\x89\xda\x5d\xf4\xa0\xfd\xfa\x35\x65\xa8\x5b\x5d\xfd\x12\xa9\xf7\x84\x54\x15\x4a\xc1\x85\xd4\x32\x67\xee\x33\x90\x08\x40'
client_random = b'\x91\xc6\x36\x47\x1b\xfe\x58\xea\x21\x5d\x0f\x69\x3a\x1a\xd1\x78\xf1\x38\xf3\xc0\x60\x6d\x30\x72\xf2\xaf\xf1\xad\x24\x86\x6a\x87'
master_secret = b'\xd2\x76\x4f\x01\x83\x60\xd6\xc1\x29\x3c\x56\x76\xe2\x06\xad\xe5\x8b\x31\xfc\x56\x77\xde\xef\x2a\xee\xda\xb0\xf7\x28\x7d\x87\xea\x43\xb5\xc6\xd9\x9c\xd8\xc9\x01\x39\xb0\x7a\xbe\x6a\xe4\x99\xbc'

MAX_KEY_MATERIAL_LENGTH = 128

def HMAC_hash(secret, seed):
    ret = HMAC.new(secret, seed, SHA384).digest()
    #print('Hashing secret, seed: {}, {}'.format(secret, seed))
    #print('Generated key material: [{}]{}'.format(len(ret), ret))
    return ret


def P_hash(secret, seed):
    res = b''
    A_i = [seed]

    while len(res) < MAX_KEY_MATERIAL_LENGTH:
        A_i.append(HMAC_hash(secret, A_i[-1]))  # A_i = HMAC_hash(secret, A_(i-1))

        # P_hash(secret, seed) = HMAC_hash(secret, A(1) + seed) + HMAC_hash(secret, A(2) + seed) + ...
        res += HMAC_hash(secret, A_i[-1] + seed)

    return res


def PRF(secret, label, seed):
    return P_hash(secret, label + seed)


def get_keys(key_material):
    client_write_MAC_key = b''
    server_write_MAC_key = b''

    client_write_key = key_material[0:32]
    server_write_key = key_material[32:64]
    client_write_IV = key_material[64:68]
    server_write_IV = key_material[68:72]

    return client_write_MAC_key, server_write_MAC_key, client_write_key, server_write_key, client_write_IV, server_write_IV


key_material = PRF(master_secret, b'key expansion', server_random + client_random)
client_write_MAC_key, server_write_MAC_key, client_write_key, server_write_key, client_write_IV, server_write_IV = get_keys(key_material)

nonce = client_cipher_text[:8]
client_cipher_text = client_cipher_text[8:]
client_cipher_text = client_cipher_text[:-16]  # Chop off mac (for some reason verification doesn't work)

print('Key material generated: {}'.format(len(key_material)))
print('Master secret len: {}'.format(len(master_secret)))
print('Client write key len: {}'.format(len(client_write_key)))
print('Client write IV len: {}'.format(len(client_write_IV)))
print('Nonce len: {}'.format(len(nonce)))
print('Cipher text len: {}'.format(len(client_cipher_text)))

decrypter = AES.new(client_write_key, AES.MODE_GCM, nonce=(client_write_IV + nonce))
additional_data = nonce + b'\x17' + b'\x03\x03' + b'\x01\x61'
decrypter.update(additional_data)
print(decrypter.decrypt(client_cipher_text))